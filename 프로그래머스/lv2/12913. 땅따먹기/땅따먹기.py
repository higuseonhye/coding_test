def solution(land):
    for i in range(len(land) - 2, -1, -1):
        for j in range(4):
            land[i][j] += max(land[i + 1][:j] + land[i + 1][j + 1:])
    return max(land[0])

"""
이 함수는 DP(Dynamic Programming)을 사용한 것으로, 문제의 제약 조건(한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙)을 고려하여 
    각 행의 각 열에서 얻을 수 있는 점수의 최대값을 계산합니다.
    
1. 행의 수를 기준으로 반복문을 실행합니다. 반복문의 시작 인덱스는 len(land) - 2, 끝 인덱스는 -1, 감소 값은 -1입니다.
2. 각 행에 대해 4개의 열을 기준으로 반복문을 실행합니다.
3. 각 열에 대해 해당 행의 다음 행의 점수 중 최대값을 구합니다.
4. 해당 행의 해당 열에 있는 점수에 최대값을 더합니다.
5. 모든 반복문이 끝나면, land의 첫 번째 행에 있는 모든 점수 중 최대값을 반환합니다.
"""
